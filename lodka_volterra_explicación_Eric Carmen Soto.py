# -*- coding: utf-8 -*-
"""Lodka-Volterra-explicación.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1GDjC4LJLr3r58dC9eNU1CmTnOoFVmM2i
"""

# Commented out IPython magic to ensure Python compatibility.
# %matplotlib inline
import matplotlib.pyplot as plt
from random import *
from numpy import *
import sys

# Parámetros del modelo
a = 0.7  # Tasa de crecimiento de las presas en ausencia de depredadores
b = 0.5  # Tasa de depredación (probabilidad de que un depredador capture una presa)
c = 0.3  # Tasa de muerte de depredadores en ausencia de presas
e = 0.2  # Tasa a la cual los depredadores aumentan por cada presa consumida

# Parámetros de simulación
dt = 0.001        # Paso de tiempo para la simulación
max_time = 100    # Tiempo máximo para ejecutar la simulación

# Condiciones iniciales
t = 0        # Tiempo inicial
x = 1.0      # Población inicial de presas
y = 0.5      # Población inicial de depredadores

# Listas vacías para almacenar el tiempo y las poblaciones
t_list = []  # Lista para almacenar los tiempos
x_list = []  # Lista para almacenar la población de presas en cada instante
y_list = []  # Lista para almacenar la población de depredadores en cada instante

# Inicializar las listas con los valores iniciales
t_list.append(t)  # Almacena el tiempo inicial
x_list.append(x)  # Almacena la población inicial de presas
y_list.append(y)  # Almacena la población inicial de depredadores

# Bucle para ejecutar la simulación hasta que el tiempo alcance max_time
while t < max_time:
    # Calcular nuevos valores para t, x, y
    t = t + dt  # Avanzar el tiempo en dt unidades
    x = x + (a*x - b*x*y) * dt  # Actualizar la población de presas usando la ecuación de Lotka-Volterra
    y = y + (-c*y + e*x*y) * dt  # Actualizar la población de depredadores usando la ecuación de Lotka-Volterra

    # Almacenar los nuevos valores en las listas
    t_list.append(t)  # Almacena el nuevo tiempo
    x_list.append(x)  # Almacena la nueva población de presas
    y_list.append(y)  # Almacena la nueva población de depredadores

# Graficar los resultados
p = plt.plot(t_list, x_list, 'r',       # Graficar la población de presas en color rojo
             t_list, y_list, 'green',   # Graficar la población de depredadores en color verde
             linewidth=2)               # Espesor de la línea de la gráfica
plt.xlabel('Tiempo')  # Etiqueta para el eje x
plt.ylabel('Población')  # Etiqueta para el eje y
plt.title('Modelo de Lotka-Volterra: Presas vs Depredadores')  # Título del gráfico
plt.show()  # Mostrar el gráfico

"""## Escenario Uno

En este escenario, tenemos las siguientes condiciones iniciales:

- **Cantidad de presas inicial (x):** 6
- **Tasa de depredación (b):** 4
- **Tasa de crecimiento de las presas en ausencia de depredadores (a):** 0.8
- **Población inicial de depredadores (y):** 0.5
- - **Tasa a la cual los depredadores aumentan por cada presa consumida (e):** 0.2

### Descripción del Escenario

1. **Población de Presas:**
   - Al principio, la cantidad de presas es alta (x = 6), pero son poco ágiles por lo que la tasa de depredación (b = 4) es elevada..
   - La tasa de crecimiento de las presas, en ausencia de depredadores, es a = 0.8.Esto provoca que la población de presas experimente picos, pero en presencia de depredadores, su población se reduce al mínimo.

3. **Población de Depredadores:**
   - Los depredadores mantienen una población similar a su población inicial (y = 0.5).
   - La población de depredadores presenta ligeros cambios, sin aumentar ni reducirse demasiado dado que su tasa de crecimiento al comer presas es baja.

### Resumen

- **Presas:** Experimentan fluctuaciones significativas debido a la alta tasa de depredación y la capacidad de crecimiento en ausencia de depredadores.
- **Depredadores:** Se mantienen relativamente estables, con cambios menores en su población.
- **En general:** Se favorece a las presas .


"""

# Parámetros del modelo
a = 0.8  # Tasa de crecimiento de las presas en ausencia de depredadores
b = 4  # Tasa de depredación (probabilidad de que un depredador capture una presa)
c = 0.3  # Tasa de muerte de depredadores en ausencia de presas
e = 0.2  # Tasa a la cual los depredadores aumentan por cada presa consumida

# Parámetros de simulación
dt = 0.001        # Paso de tiempo para la simulación
max_time = 100    # Tiempo máximo para ejecutar la simulación

# Condiciones iniciales
t = 0        # Tiempo inicial
x = 6.0      # Población inicial de presas
y = 0.5      # Población inicial de depredadores

# Listas vacías para almacenar el tiempo y las poblaciones
t_list = []  # Lista para almacenar los tiempos
x_list = []  # Lista para almacenar la población de presas en cada instante
y_list = []  # Lista para almacenar la población de depredadores en cada instante

# Inicializar las listas con los valores iniciales
t_list.append(t)  # Almacena el tiempo inicial
x_list.append(x)  # Almacena la población inicial de presas
y_list.append(y)  # Almacena la población inicial de depredadores

# Bucle para ejecutar la simulación hasta que el tiempo alcance max_time
while t < max_time:
    # Calcular nuevos valores para t, x, y
    t = t + dt  # Avanzar el tiempo en dt unidades
    x = x + (a*x - b*x*y) * dt  # Actualizar la población de presas usando la ecuación de Lotka-Volterra
    y = y + (-c*y + e*x*y) * dt  # Actualizar la población de depredadores usando la ecuación de Lotka-Volterra

    # Almacenar los nuevos valores en las listas
    t_list.append(t)  # Almacena el nuevo tiempo
    x_list.append(x)  # Almacena la nueva población de presas
    y_list.append(y)  # Almacena la nueva población de depredadores

# Graficar los resultados
p = plt.plot(t_list, x_list, 'r',       # Graficar la población de presas en color rojo
             t_list, y_list, 'green',   # Graficar la población de depredadores en color verde
             linewidth=2)               # Espesor de la línea de la gráfica
plt.xlabel('Tiempo')  # Etiqueta para el eje x
plt.ylabel('Población')  # Etiqueta para el eje y
plt.title('Modelo de Lotka-Volterra: Presas vs Depredadores')  # Título del gráfico
plt.show()  # Mostrar el gráfico

"""## Escenario 2

En este escenario, tenemos las siguientes condiciones iniciales:

- **Tasa de crecimiento de las presas en ausencia de depredadores (a):** 0.5
- **Tasa de depredación (probabilidad de que un depredador capture una presa)(b):** 0.1
- **Tasa de muerte de depredadores en ausencia de presas (c):** 0.2
- **Tasa a la cual los depredadores aumentan por cada presa consumida (e):** 0.8
- **Población inicial de depredadores (y):** 0.5
- **Población inicial de depredadores (x):** 0.5

### Descripción del Escenario


   - Las poblaciones de ambas especies son las mismas inicialmente, y cuando las presas no tienen muchos depredadores, estas tienen una tasa de crecimiento del 0.5, lo cual es promedio. Sin embargo, los depredadores la tienen difícil para cazar, ya que las presas son muy listas (Tasa de depredación = 0.1), es por ello que esa tasa es baja. Lo bueno es que estos depredadores no mueren tan fácil; su tasa de muerte es del 0.2 cuando no tienen presas, y cuando logran cazar, su población se recupera (Tasa a la cual los depredadores aumentan por cada presa consumida (e) = 0.8). Como resultado, el modelo muestra más proliferación en los depredadores, ya que, al no depender tanto de sus presas, pueden reproducirse bien. Al ser tantos, reducen mucho la población de presas.



### Resumen

- **Presas:** Son de una poblacion constantemente baja debido a la alta cantidad de depredadores, tienen un proceso de recuperacion tardado que no les permite hacer frente al crecimiento de los depredadores.
- **Depredadores:** Sus poblaciones no dependen tanto de las presas por lo que son constantemente altas.
- **Se favorece a los depredadores

"""

# Parámetros del modelo
a = 0.5  # Tasa de crecimiento de las presas en ausencia de depredadores
b = 0.1  # Tasa de depredación (probabilidad de que un depredador capture una presa)
c = 0.2  # Tasa de muerte de depredadores en ausencia de presas
e = 0.8  # Tasa a la cual los depredadores aumentan por cada presa consumida

# Parámetros de simulación
dt = 0.001        # Paso de tiempo para la simulación
max_time = 100    # Tiempo máximo para ejecutar la simulación

# Condiciones iniciales
t = 0        # Tiempo inicial
x = 0.5      # Población inicial de presas
y = 0.5      # Población inicial de depredadores

# Listas vacías para almacenar el tiempo y las poblaciones
t_list = []  # Lista para almacenar los tiempos
x_list = []  # Lista para almacenar la población de presas en cada instante
y_list = []  # Lista para almacenar la población de depredadores en cada instante

# Inicializar las listas con los valores iniciales
t_list.append(t)  # Almacena el tiempo inicial
x_list.append(x)  # Almacena la población inicial de presas
y_list.append(y)  # Almacena la población inicial de depredadores

# Bucle para ejecutar la simulación hasta que el tiempo alcance max_time
while t < max_time:
    # Calcular nuevos valores para t, x, y
    t = t + dt  # Avanzar el tiempo en dt unidades
    x = x + (a*x - b*x*y) * dt  # Actualizar la población de presas usando la ecuación de Lotka-Volterra
    y = y + (-c*y + e*x*y) * dt  # Actualizar la población de depredadores usando la ecuación de Lotka-Volterra

    # Almacenar los nuevos valores en las listas
    t_list.append(t)  # Almacena el nuevo tiempo
    x_list.append(x)  # Almacena la nueva población de presas
    y_list.append(y)  # Almacena la nueva población de depredadores

# Graficar los resultados
p = plt.plot(t_list, x_list, 'r',       # Graficar la población de presas en color rojo
             t_list, y_list, 'green',   # Graficar la población de depredadores en color verde
             linewidth=2)               # Espesor de la línea de la gráfica
plt.xlabel('Tiempo')  # Etiqueta para el eje x
plt.ylabel('Población')  # Etiqueta para el eje y
plt.title('Modelo de Lotka-Volterra: Presas vs Depredadores')  # Título del gráfico
plt.show()  # Mostrar el gráfico

"""## Escenario 3

En este escenario, tenemos las siguientes condiciones iniciales:

- **Tasa de crecimiento de las presas en ausencia de depredadores (a):** 0.7
- **Tasa de depredación (probabilidad de que un depredador capture una presa) (b):** 0.3
- **Tasa de muerte de depredadores en ausencia de presas (c):** 0.7
- **Tasa a la cual los depredadores aumentan por cada presa consumida (e):** 0.7
- **Población inicial de depredadores (y):** 1.0
- **Población inicial de presas (x):** 0.3

### Descripción del Escenario

- Inicialmente, la población de depredadores es alta y son algo malos cazando. Aun así, al cazar, tienen una tasa de natalidad alta, por lo que no necesitan muchas presas para aumentar su población. Por otro lado, las presas son una población baja al principio, pero tienen la capacidad de aumentar cuando no hay muchos depredadores. Esto lleva a una cantidad grande de depredadores, pero sin llevar a las presas al borde de la extinción, permitiéndoles recuperarse en periodos cortos de tiempo y manteniendo una población media.

### Resumen

- **Presas:** Se recuperan rápidamente, su población se reduce y se recupera de nuevo con rapidez, aunque no igualan la población de los depredadores.
- **Depredadores:** Su población es considerablemente independiente de las presas; aumenta mucho cuando se alimentan.

"""

# Parámetros del modelo
a = 0.7  # Tasa de crecimiento de las presas en ausencia de depredadores
b = 0.3  # Tasa de depredación (probabilidad de que un depredador capture una presa)
c = 0.7  # Tasa de muerte de depredadores en ausencia de presas
e = 0.7  # Tasa a la cual los depredadores aumentan por cada presa consumida

# Parámetros de simulación
dt = 0.001        # Paso de tiempo para la simulación
max_time = 100    # Tiempo máximo para ejecutar la simulación

# Condiciones iniciales
t = 0        # Tiempo inicial
x = 1.0      # Población inicial de presas
y = 0.3      # Población inicial de depredadores

# Listas vacías para almacenar el tiempo y las poblaciones
t_list = []  # Lista para almacenar los tiempos
x_list = []  # Lista para almacenar la población de presas en cada instante
y_list = []  # Lista para almacenar la población de depredadores en cada instante

# Inicializar las listas con los valores iniciales
t_list.append(t)  # Almacena el tiempo inicial
x_list.append(x)  # Almacena la población inicial de presas
y_list.append(y)  # Almacena la población inicial de depredadores

# Bucle para ejecutar la simulación hasta que el tiempo alcance max_time
while t < max_time:
    # Calcular nuevos valores para t, x, y
    t = t + dt  # Avanzar el tiempo en dt unidades
    x = x + (a*x - b*x*y) * dt  # Actualizar la población de presas usando la ecuación de Lotka-Volterra
    y = y + (-c*y + e*x*y) * dt  # Actualizar la población de depredadores usando la ecuación de Lotka-Volterra

    # Almacenar los nuevos valores en las listas
    t_list.append(t)  # Almacena el nuevo tiempo
    x_list.append(x)  # Almacena la nueva población de presas
    y_list.append(y)  # Almacena la nueva población de depredadores

# Graficar los resultados
p = plt.plot(t_list, x_list, 'r',       # Graficar la población de presas en color rojo
             t_list, y_list, 'green',   # Graficar la población de depredadores en color verde
             linewidth=2)               # Espesor de la línea de la gráfica
plt.xlabel('Tiempo')  # Etiqueta para el eje x
plt.ylabel('Población')  # Etiqueta para el eje y
plt.title('Modelo de Lotka-Volterra: Presas vs Depredadores')  # Título del gráfico
plt.show()  # Mostrar el gráfico

"""## Escenario 4

En este escenario, tenemos las siguientes condiciones iniciales:

- **Tasa de crecimiento de las presas en ausencia de depredadores (a):** 0.2
- **Tasa de depredación (probabilidad de que un depredador capture una presa) (b):** 0.8
- **Tasa de muerte de depredadores en ausencia de presas (c):** 0.05
- **Tasa a la cual los depredadores aumentan por cada presa consumida (e):** 1
- **Población inicial de depredadores (y):** 0.5
- **Población inicial de presas (x):** 0.5

### Descripción del Escenario

- En esta versión del modelo, se favorece radicalmente a los depredadores. Como resultado, las presas tienen un tiempo de recuperación más lento, lo que prolonga el ciclo de recuperación y caída de ambas poblaciones. Los depredadores alcanzan picos más altos, mientras que las presas no aumentan tanto, pero sorprendentemente logran alcanzar poco menos de la mitad de la población de los depredadores.

"""

# Parámetros del modelo
a = 0.2  # Tasa de crecimiento de las presas en ausencia de depredadores
b = 0.8 # Tasa de depredación (probabilidad de que un depredador capture una presa)
c = 0.05  # Tasa de muerte de depredadores en ausencia de presas
e = 1  # Tasa a la cual los depredadores aumentan por cada presa consumida

# Parámetros de simulación
dt = 0.001        # Paso de tiempo para la simulación
max_time = 500    # Tiempo máximo para ejecutar la simulación

# Condiciones iniciales
t = 0        # Tiempo inicial
x = 0.5      # Población inicial de presas
y = 0.5      # Población inicial de depredadores

# Listas vacías para almacenar el tiempo y las poblaciones
t_list = []  # Lista para almacenar los tiempos
x_list = []  # Lista para almacenar la población de presas en cada instante
y_list = []  # Lista para almacenar la población de depredadores en cada instante

# Inicializar las listas con los valores iniciales
t_list.append(t)  # Almacena el tiempo inicial
x_list.append(x)  # Almacena la población inicial de presas
y_list.append(y)  # Almacena la población inicial de depredadores

# Bucle para ejecutar la simulación hasta que el tiempo alcance max_time
while t < max_time:
    # Calcular nuevos valores para t, x, y
    t = t + dt  # Avanzar el tiempo en dt unidades
    x = x + (a*x - b*x*y) * dt  # Actualizar la población de presas usando la ecuación de Lotka-Volterra
    y = y + (-c*y + e*x*y) * dt  # Actualizar la población de depredadores usando la ecuación de Lotka-Volterra

    # Almacenar los nuevos valores en las listas
    t_list.append(t)  # Almacena el nuevo tiempo
    x_list.append(x)  # Almacena la nueva población de presas
    y_list.append(y)  # Almacena la nueva población de depredadores

# Graficar los resultados
p = plt.plot(t_list, x_list, 'r',       # Graficar la población de presas en color rojo
             t_list, y_list, 'green',   # Graficar la población de depredadores en color verde
             linewidth=2)               # Espesor de la línea de la gráfica
plt.xlabel('Tiempo')  # Etiqueta para el eje x
plt.ylabel('Población')  # Etiqueta para el eje y
plt.title('Modelo de Lotka-Volterra: Presas vs Depredadores')  # Título del gráfico
plt.show()  # Mostrar el gráfico

"""## Escenario 5

En este escenario, tenemos las siguientes condiciones iniciales:

- **Tasa de crecimiento de las presas en ausencia de depredadores (a):** 0.1
- **Tasa de depredación (probabilidad de que un depredador capture una presa) (b):** 1.2
- **Tasa de muerte de depredadores en ausencia de presas (c):** 0.05
- **Tasa a la cual los depredadores aumentan por cada presa consumida (e):** 0.9
- **Población inicial de depredadores (y):** 0.5
- **Población inicial de presas (x):** 0.5

### Descripción del Escenario

- las presas crecen en un nivel bajo y  mientras que la probabilidad de ser cazadas es muy alto, sin embargo los depredadores dependen altamente de las presas para aumentar su poblacion, incluso cuando son buenos cazando.Esto tiene un impacto negativo por qye las presas y depredadores crecen lento y es facil que se acaben las presas llevandolos cerca de la extincion

"""

# Parámetros del modelo
a = 0.1  # Tasa de crecimiento de las presas en ausencia de depredadores
b = 1.2  # Tasa de depredación
c = 0.05  # Tasa de muerte de depredadores en ausencia de presas
e = 0.9   # Tasa a la cual los depredadores aumentan por cada presa consumida

# Parámetros de simulación
dt = 0.001        # Paso de tiempo para la simulación
max_time = 500    # Tiempo máximo para ejecutar la simulación

# Condiciones iniciales
t = 0        # Tiempo inicial
x = 0.5      # Población inicial de presas
y = 0.5      # Población inicial de depredadores

# Listas vacías para almacenar el tiempo y las poblaciones
t_list = []  # Lista para almacenar los tiempos
x_list = []  # Lista para almacenar la población de presas en cada instante
y_list = []  # Lista para almacenar la población de depredadores en cada instante

# Inicializar las listas con los valores iniciales
t_list.append(t)  # Almacena el tiempo inicial
x_list.append(x)  # Almacena la población inicial de presas
y_list.append(y)  # Almacena la población inicial de depredadores

# Bucle para ejecutar la simulación hasta que el tiempo alcance max_time
while t < max_time and x > 0 and y > 0:  # Continuar hasta que se extingan las poblaciones o se alcance el tiempo máximo
    # Calcular nuevos valores para t, x, y
    t = t + dt  # Avanzar el tiempo en dt unidades
    x = x + (a*x - b*x*y) * dt  # Actualizar la población de presas usando la ecuación de Lotka-Volterra
    y = y + (-c*y + e*x*y) * dt  # Actualizar la población de depredadores usando la ecuación de Lotka-Volterra

    # Almacenar los nuevos valores en las listas
    t_list.append(t)  # Almacena el nuevo tiempo
    x_list.append(x)  # Almacena la nueva población de presas
    y_list.append(y)  # Almacena la nueva población de depredadores

# Graficar los resultados
p = plt.plot(t_list, x_list, 'r',       # Graficar la población de presas en color rojo
             t_list, y_list, 'green',   # Graficar la población de depredadores en color verde
             linewidth=2)               # Espesor de la línea de la gráfica
plt.xlabel('Tiempo')  # Etiqueta para el eje x
plt.ylabel('Población')  # Etiqueta para el eje y
plt.title('Modelo de Lotka-Volterra: Presas vs Depredadores')  # Tít

